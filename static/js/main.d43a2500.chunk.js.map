{"version":3,"sources":["components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Statistic/Statistic.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["Section","title","children","className","prpTypes","PropTypes","string","isRequired","FeedbackOptions","options","onLeaveFeedback","map","option","type","name","onClick","shortid","generate","Statistic","good","neutral","bad","total","positivePercentage","Notification","message","App","state","countTotalFeedback","countPositiveFeedbackPercentage","percentage","isNaN","Math","round","e","target","setState","prevState","this","objKey","Object","keys","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wVAGMA,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,0BAASC,UAAU,UAAnB,UACE,oBAAIA,UAAU,QAAd,SAAuBF,IACtBC,MAIPF,EAAQI,SAAW,CACjBH,MAAOI,IAAUC,OAAOC,YAEXP,Q,gBCWAQ,G,MArBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,mCACGD,EAAQE,KAAI,SAACC,GAAD,OACX,wBACET,UAAU,SAEVU,KAAK,SACLC,KAAMF,EACNG,QAASL,EALX,SAOGE,GALII,IAAQC,mBCYRC,G,MAnBG,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC9C,OACE,qCACE,oBAAGpB,UAAU,YAAb,mBAAgCgB,KAChC,oBAAGhB,UAAU,YAAb,sBAAmCiB,KACnC,oBAAGjB,UAAU,YAAb,kBAA+BkB,KAC/B,oBAAGlB,UAAU,YAAb,oBAAiCmB,KACjC,oBAAGnB,UAAU,YAAb,gCAA6CoB,EAA7C,aCESC,EAVM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OACE,mCACE,4BAAIA,OC0DKC,E,4MAzDbC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAEPO,mBAAqB,WACnB,MAA+B,EAAKD,MAEpC,OAFA,EAAQR,KAAR,EAAcC,QAAd,EAAuBC,K,EAIzBQ,gCAAkC,WAChC,IAAMP,EAAQ,EAAKM,qBAEbE,EAAqB,IADV,EAAKH,MAAdR,KAC0BG,EAClC,OAAIS,MAAMD,GACD,EAEFE,KAAKC,MAAMH,I,EAGpBpB,gBAAkB,SAACwB,GACjB,IAAMpB,EAAOoB,EAAEC,OAAOrB,KACtB,EAAKsB,UAAS,SAACC,GAAD,sBACXvB,EAAOuB,EAAUvB,GAAQ,O,4CAG9B,WACE,MAA+BwB,KAAKX,MAA5BR,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAEjBkB,EAASC,OAAOC,KAAKH,KAAKX,OAChC,OACE,gCACE,cAAC,EAAD,CAAS1B,MAAM,wBAAf,SACE,cAAC,EAAD,CACEQ,QAAS8B,EACT7B,gBAAiB4B,KAAK5B,oBAI1B,cAAC,EAAD,CAAST,MAAM,YAAf,SACiC,IAA9BqC,KAAKV,qBACJ,cAAC,EAAD,CAAcH,QAAQ,sBAEtB,cAAC,EAAD,CACEN,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOgB,KAAKV,qBACZL,mBAAoBe,KAAKT,6C,GAjDrBa,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d43a2500.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Section.css\";\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section className=\"section\">\r\n      <h2 className=\"title\">{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\nSection.prpTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\nexport default Section;\r\n","import React from \"react\";\r\nimport shortid from \"shortid\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./FeedbackOptions.css\";\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <>\r\n      {options.map((option) => (\r\n        <button\r\n          className=\"button\"\r\n          key={shortid.generate()}\r\n          type=\"button\"\r\n          name={option}\r\n          onClick={onLeaveFeedback}\r\n        >\r\n          {option}\r\n        </button>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.array.isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Statistic.css\";\r\nconst Statistic = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <>\r\n      <p className=\"statistic\">Good: {good}</p>\r\n      <p className=\"statistic\">Neutral: {neutral}</p>\r\n      <p className=\"statistic\">Bad: {bad}</p>\r\n      <p className=\"statistic\">Total: {total}</p>\r\n      <p className=\"statistic\">Positive feedback: {positivePercentage} %</p>\r\n    </>\r\n  );\r\n};\r\nStatistic.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistic;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nconst Notification = ({ message }) => {\r\n  return (\r\n    <>\r\n      <p>{message}</p>\r\n    </>\r\n  );\r\n};\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\nexport default Notification;\r\n","import React from \"react\";\nimport Section from \"./components/Section/Section\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Statistic from \"./components/Statistic/Statistic\";\nimport Notification from \"./components/Notification/Notification\";\nclass App extends React.Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    const total = good + neutral + bad;\n    return total;\n  };\n  countPositiveFeedbackPercentage = () => {\n    const total = this.countTotalFeedback();\n    const { good } = this.state;\n    const percentage = (good * 100) / total;\n    if (isNaN(percentage)) {\n      return 0;\n    }\n    return Math.round(percentage);\n  };\n\n  onLeaveFeedback = (e) => {\n    const name = e.target.name;\n    this.setState((prevState) => ({\n      [name]: prevState[name] + 1,\n    }));\n  };\n  render() {\n    const { good, neutral, bad } = this.state;\n\n    const objKey = Object.keys(this.state);\n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={objKey}\n            onLeaveFeedback={this.onLeaveFeedback}\n          />\n        </Section>\n\n        <Section title=\"Statistic\">\n          {this.countTotalFeedback() === 0 ? (\n            <Notification message=\"No feedback given\"></Notification>\n          ) : (\n            <Statistic\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"modern-normalize/modern-normalize.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}